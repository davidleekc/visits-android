apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'  // Google Services plugin

apply plugin: 'com.google.firebase.crashlytics'

apply plugin: "androidx.navigation.safeargs.kotlin"


android {

    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "com.hypertrack.logistics.android.github"
        minSdkVersion 23
        targetSdkVersion 30
        versionName "0.7.0-SNAPSHOT"
        versionCode codeFromVersionString(versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "google_places_api_key", rootProject.properties.placesApiKey
        resValue "string", "branch_io_api_key", rootProject.properties.logisticsBranchKey
        resValue "string", "awsLoginTestUserName", rootProject.properties.awsLoginTestUserName
        resValue "string", "awsLoginTestUserPwd", rootProject.properties.awsLoginTestUserPwd
        resValue "string", "awsLoginTestExpectedPk", rootProject.properties.awsLoginTestExpectedPk
        if(rootProject.properties.servicesApiKey == null) throw new Exception("SERVICES_API_KEY = null")
        buildConfigField("String", "SERVICES_API_KEY", "\"${rootProject.properties.servicesApiKey}\"")

    }
    signingConfigs {
        release {
            storeFile file(project.properties.logisticsKeystorePath)
            storePassword project.properties.logisticsStorePassword
            keyAlias project.properties.logisticsKeyAlias
            keyPassword project.properties.logisticsKeyPassword
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig = signingConfigs.release
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources true
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        abortOnError false
    }
// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)
}

repositories {
    maven {
        name 'hypertrack'
        url 'http://m2.hypertrack.com'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "androidx.activity:activity-ktx:1.2.2"
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.4.0'

    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.0'
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.3'
    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"
    implementation 'com.squareup.retrofit2:converter-scalars:2.6.3'
    implementation 'com.squareup.moshi:moshi:1.11.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.11.0'

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    kaptTest  'com.squareup.moshi:moshi-kotlin-codegen:1.11.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'com.airbnb.android:lottie:3.1.0'
    implementation 'com.hypertrack:hypertrack:4.11.0'

    // Branch IO
    implementation 'io.branch.sdk.android:library:5.0.1'
    implementation 'com.google.firebase:firebase-appindexing:19.2.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'

    // Cognito
    implementation 'com.amazonaws:aws-android-sdk-mobile-client:2.16.7'

    // Crashlytics
    implementation 'com.google.firebase:firebase-crashlytics:17.4.1'
    implementation 'com.google.firebase:firebase-analytics:18.0.2'

    // Whitelisting on hostile ROMs
    implementation 'com.github.judemanutd:autostarter:1.0.8'

    implementation 'com.hypertrack:hypertrack-views:0.8.6'
    implementation 'com.hypertrack:maps-google:0.1.8'

    testImplementation 'junit:junit:4.13.2'
    //noinspection GradleDependency
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.2.2'
    testImplementation "io.mockk:mockk:1.10.6"
    testImplementation "androidx.test:core:1.3.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.5'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.robolectric:robolectric:4.4'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

def codeFromVersionString(versionString) {

    def match = (versionString =~ /(\d+)\.(\d+)\.(\d+)(?:(?<snapshot>-SNAPSHOT)|(?<alpha>-alpha(?<alphaVersion>\d?))|(?<beta>-beta(?<betaVersion>\d?))|(?<rc>-rc(?<rcVersion>\d?)))?/)
    if (match) {
        def versionMajor = match.group(1).toInteger()
        def versionMinor = match.group(2).toInteger()
        def versionPatch = match.group(3).toInteger()
        def featureSuffix = 0
        if (match.group('rc')) {
            featureSuffice += 30
            featureSuffix += (match.group('rcVersion')?:"0").toInteger()
        } else if (match.group('beta')) {
            featureSuffix += 20
            featureSuffix += (match.group('betaVersion')?:"0").toInteger()
        } else if (match.group('alpha')) {
            featureSuffix += 10
            featureSuffix += (match.group('alphaVersion')?:"0").toInteger()
        } else if (match.group('snapshot'))
            featureSuffix = 5
        return versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + featureSuffix

    }
}
